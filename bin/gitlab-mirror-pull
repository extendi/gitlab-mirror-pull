#!/usr/bin/env ruby

require_relative '../lib/gitlab_mirror_pullpull.rb'

options = {
  :config => File.join(File.dirname(__FILE__), "../config.example.yml"),
  :log_level => Logger::ERROR
}

# Parse commandline arguments
#
# == Parameters:
# 	:config => File.join(File.dirname(__FILE__), "../config.example.yml"),
# 	:log_level => Logger::ERROR
#
# == Returns:
# Log output (default: ERROR)
# 
OptionParser.new do |opts|
  opts.banner = "Usage: gitlab-mirror-pull.rb [options]"
  opts.set_summary_indent('   ')
  opts.set_summary_width(50)
  opts.define_head "Fetch gitlab repositories when remote set.
Default config #{File.join(File.dirname(__FILE__), "../config.example.yml")}\n\n"

  # Config argument
  opts.on("-c", "--config [config.yml]", "Specify config yaml") do |yml|
    options[:config] = yml
  end

  # Run Webserver
  opts.on("-r", "--run [server]", "Run webserver for gitlab webhooks") do |server|
    options[:run] = server
  end

  # LogLevel argument
  opts.on("-l", "--log-level [INFO|WARN|ERROR|DEBUG]", "Define log level") do |level|
    case level
    when "INFO"
      options[:log_level] = Logger::INFO
    when "WARN"
      options[:log_level] = Logger::WARN
    when "ERROR"
      options[:log_level] = Logger::ERROR
    when "DEBUG"
      options[:log_level] = Logger::DEBUG
    end
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

end.parse!

if options[:run] == 'server'

  require 'sinatra'
  require 'multi_json'

  config = YAML.load_file(options[:config])

  # Configure server
  set :port, config['server']['port']
  set :bind, config['server']['bind']

  post '/commit' do
    gitlab_json = MultiJson.load(request.body.read)
    # File.join(File.dirname(__FILE__), "../config.example.yml")
    repo_path = File.join(config['git']['repos'], gitlab_json['project']['namespace'].downcase, gitlab_json['project']['name'].downcase)
    puts repo_path
  end

else
  # Run `git fetch` depending on options[:config]
  GitlabMirrorPull.new(options[:config], options[:log_level])
end